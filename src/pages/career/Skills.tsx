import { GradientText } from '../../components/GradientText';
import React from 'react';
import { Link } from 'react-router-dom';
import styles from './ProjectPage.module.css';

export const Skills: React.FC = () => {
  return (
    <div className={styles.container}>
      <Link to="/career" className={styles.backLink}>← Back to Career Overview</Link>
      
      <header className={styles.hero}>
        <GradientText as="h1">Technical Skills & Philosophy</GradientText>
      </header>

      <section className={styles.section}>
        <h2>Core Technical Skills</h2>
        
        <div className={styles.subsection}>
          <h3>Languages & Frameworks</h3>
          <p><strong>Expert Level:</strong></p>
          <ul>
            <li>TypeScript & JavaScript (ES6+)</li>
            <li>React & Redux architecture</li>
            <li>Node.js production infrastructure</li>
            <li>Modern CSS (variables, grid, flexbox, animations)</li>
          </ul>
          
          <p><strong>Proficient:</strong></p>
          <ul>
            <li>Python (backend systems, data processing)</li>
            <li>SQL (complex queries, performance optimization)</li>
            <li>PHP (legacy systems, full-stack development)</li>
            <li>HTML5 (semantic markup, accessibility)</li>
          </ul>
        </div>
      </section>

      <section className={styles.section}>
        <h2>Specialized Expertise</h2>
        
        <div className={styles.subsection}>
          <h3>Complex UI Systems</h3>
          <ul>
            <li>Real-time collaboration and multi-user editing</li>
            <li>Drag-and-drop functionality</li>
            <li>Rich text editors and data visualization</li>
            <li>Data-dense interfaces with virtualization</li>
            <li>Canvas and WebGL graphics</li>
            <li>Interactive dashboards and reporting</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>Performance Engineering</h3>
          <ul>
            <li>Asset pipelines and code-splitting strategies</li>
            <li>Server-side rendering (SSR) and hydration</li>
            <li>Critical rendering path optimization</li>
            <li>Caching strategies and profiling</li>
            <li>Bundle size optimization</li>
            <li>Performance monitoring and telemetry</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>State Management at Scale</h3>
          <ul>
            <li>Redux architecture for large applications</li>
            <li>Complex state synchronization patterns</li>
            <li>Real-time state updates and collaboration</li>
            <li>State persistence and recovery</li>
            <li>Cross-component state coordination</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>API Architecture</h3>
          <ul>
            <li>RESTful API design and implementation</li>
            <li>gRPC and HTTP transcoding</li>
            <li>Autogenerated API clients</li>
            <li>API versioning and migration strategies</li>
            <li>Error handling and retry logic</li>
          </ul>
        </div>
      </section>

      <section className={styles.section}>
        <h2>Technical Philosophy</h2>
        
        <div className={styles.subsection}>
          <h3>Systems Thinking</h3>
          <p>
            Build composable components and architectures that scale across teams. Focus on creating infrastructure 
            that serves as organizational foundation, not just solving immediate problems.
          </p>
          <p><strong>Examples:</strong></p>
          <ul>
            <li>Redux state management adopted by 10+ teams</li>
            <li>HTTP/gRPC client library used by 15+ services</li>
            <li>Component libraries serving entire organizations</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>Performance Without Sacrifice</h3>
          <p>
            Consistently optimize for speed without sacrificing maintainability or developer experience. 
            Performance is a feature, not an afterthought.
          </p>
          <p><strong>Examples:</strong></p>
          <ul>
            <li>95% page load reduction (8s → 400ms) at TodayTix</li>
            <li>Widget fidelity improvement from 70% to 100% at Datadog</li>
            <li>Dev loop reduction from 30 minutes to 1 minute</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>Quality Through Standards</h3>
          <p>
            Establish testing patterns, code quality standards, and operational excellence that prevent 
            problems before they occur.
          </p>
          <p><strong>Examples:</strong></p>
          <ul>
            <li>Integration testing frameworks for complex UIs</li>
            <li>TypeScript type safety initiatives</li>
            <li>CI/CD and monitoring implementations</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>Knowledge Sharing</h3>
          <p>
            Build communities, teach classes, organize summits, and mentor engineers. Technical excellence 
            spreads through culture, not mandates.
          </p>
          <p><strong>Examples:</strong></p>
          <ul>
            <li>Founded JavaScript Guild at Dropbox</li>
            <li>Weekly TypeScript/React training at Bluecore</li>
            <li>Organized 100+ attendee technical summits</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>End-to-End Ownership</h3>
          <p>
            Take projects from fuzzy ideas through production to measurable impact. Understand the full 
            stack from user research to infrastructure.
          </p>
          <p><strong>Examples:</strong></p>
          <ul>
            <li>Special Offers feature at TodayTix (research → implementation → revenue)</li>
            <li>Plus Plus Family Plans at Dropbox (concept → launch)</li>
            <li>PDF Reporting System at Datadog (architecture → production)</li>
          </ul>
        </div>
      </section>

      <section className={styles.section}>
        <h2>Leadership Approach</h2>
        
        <div className={styles.subsection}>
          <h3>Technical Leadership</h3>
          <ul>
            <li>Drive technology selection and architecture decisions</li>
            <li>Navigate organizational challenges and build consensus</li>
            <li>Establish technical standards across teams</li>
            <li>Mentor and grow other engineers</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>Migration Expertise</h3>
          <ul>
            <li>Plan and execute large-scale technical migrations</li>
            <li>Build automation tools (codemods, scripts)</li>
            <li>Coordinate organization-wide rollouts</li>
            <li>Manage change with minimal disruption</li>
          </ul>
        </div>

        <div className={styles.subsection}>
          <h3>Community Building</h3>
          <ul>
            <li>Found and nurture communities of practice</li>
            <li>Create spaces for knowledge sharing</li>
            <li>Facilitate cross-team collaboration</li>
            <li>Build culture of continuous learning</li>
          </ul>
        </div>
      </section>

      <section className={styles.section}>
        <h2>Core Values</h2>
        <ul className={styles.themesList}>
          <li><strong>Deep Understanding:</strong> Always want to understand how systems work fundamentally, not just use them superficially</li>
          <li><strong>Users Are People:</strong> Every user has real problems that need solving with empathy and care</li>
          <li><strong>Quality Compounds:</strong> Small improvements in quality, performance, and maintainability compound over time</li>
          <li><strong>Share Knowledge:</strong> Technical excellence spreads through teaching, documentation, and community building</li>
          <li><strong>Own Outcomes:</strong> Take responsibility for results, not just implementations. Focus on impact, not activity</li>
          <li><strong>Build for Humans:</strong> Technology serves people. Make complex systems accessible, reliable, and trustworthy</li>
        </ul>
      </section>
    </div>
  );
};
